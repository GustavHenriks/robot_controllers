#!/usr/bin/env python
import rospy
import numpy as np
# import math
import tf.transformations
import tf
# import tf2_ros
# from geometry_msgs.msg import Pose, PoseStamped, Point32, TransformStamped, TwistStamped
from std_msgs.msg import Int8
# from sensor_msgs.msg import PointCloud
from mpl_toolkits.mplot3d import Axes3D
from geometry_msgs.msg import Pose
from visualization_msgs.msg import MarkerArray
from sklearn.decomposition import PCA 
import matplotlib.pyplot as plt
# import time
# from nav_msgs.msg import Path

class marker_to_target():
    def __init__(self):

        freq = 10
        self.x=0
        self.y=0
        self.z=0
        self.x_dir=np.zeros(3)
        self.x_pca_axis_old=np.array([0,1,0])
        self.counter=0
        self.hist_vec=np.zeros(15)
        self.change_vec=np.zeros(15)
        self.change_vec_sum=0
        rospy.init_node('marker_to_target', anonymous=True)
        rate = rospy.Rate(freq)
        self.MarkerSub = rospy.Subscriber(
            "/sr/object_clusters_markerArray", MarkerArray, self.chatterCallback_Marker)  
        self.SaladPub = rospy.Publisher(
            "/salad", Int8, queue_size=3)
        self.salad_value=0
        self.salad_detected=False
        br_target = tf.TransformBroadcaster()
        br_test = tf.TransformBroadcaster()
        self.listener = tf.TransformListener()
        target_pose = Pose()
        self.data_received=False    
        z_in_world=np.array([0,0,1,1])

        # self.plot_test()
        print("Running...")
        while not rospy.is_shutdown():
            # self.plot_pcl()
            ###  Used for testing the accuracy of the grip
            # try:            
            #     trans_ee_test = self.listener.lookupTransform(
            #         'world', 'mocap_realsense_config', rospy.Time(0))
            #     # if not self.ee_svr_logged:
            #     #     rospy.loginfo("ee_real transform received")
            #     #     self.ee_svr_logged = True
            # except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            #     continue  
            # quat_test1=tf.transformations.quaternion_multiply(trans_ee_test[1],tf.transformations.quaternion_about_axis(np.pi,(1,0,0)))
            try:            
                trans_ee_real = self.listener.lookupTransform(
                    'camera_depth_optical_frame', 'mocap_world', rospy.Time(0))
                # if not self.ee_svr_logged:
                #     rospy.loginfo("ee_real transform received")
                #     self.ee_svr_logged = True
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue            
            print(trans_ee_real)

            try:
                common_time = self.listener.getLatestCommonTime(
                'mocap_realsense_config_fixed', 'camera_depth_optical_frame') 
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                # print(tf.LookupException())
                continue
            self.up=np.dot(tf.transformations.quaternion_matrix(trans_ee_real[1]),z_in_world)[:-1]
            quat=self.quat_from_Vector_y(self.x_dir)
            # quat=self.quat_from_Vector(np.append(self.x_dir,0))
            # print(np.linalg.norm(quat))
            br_target.sendTransform([self.x,self.y,self.z],quat,common_time,'target_position','camera_depth_optical_frame')
            # br_target.sendTransform(trans_ee_test[0]+np.array([0,0,0.25]),quat_test1,common_time,'target_position','world')
            # br_test.sendTransform([self.x+0.1,self.y,self.z],,common_time,'target_position','camera_depth_optical_frame')
            # br_target.sendTransform([self.x,self.y,self.z],trans_ee_real[1],common_time,'target_position','camera_depth_optical_frame')
            # br_test.sendTransform([self.x,self.y,self.z],trans_ee_real[1],common_time,'test','camera_depth_optical_frame')
            # a1,a2,a3=tf.transformations.rotation_from_matrix(tf.transformations.quaternion_matrix(trans_ee_real[1]))
            # if self.salad_value==1:
            #     self.SaladPub.publish(1)
            rate.sleep()

    def chatterCallback_Marker(self, data):
        self.data = data.markers
        self.data_received=True
        x_vec=[]
        y_vec=[]
        z_vec=[]
        x_vec_multi=[]
        y_vec_multi=[]
        z_vec_multi=[]
        # x_vec2=[]
        # y_vec2=[]
        # z_vec2=[]
        for i in range (len(self.data[0].points)):
            x_vec.append(self.data[0].points[i].x)
            y_vec.append(self.data[0].points[i].y)
            z_vec.append(self.data[0].points[i].z)
        for i in range(15):
            nbr_of_points=len(self.data[i].points)
            if self.hist_vec[i]!=nbr_of_points:
                self.change_vec[i]=1
            else:
                self.change_vec[i]=0
            self.hist_vec[i]=nbr_of_points

        x_vec_mean=np.mean(x_vec)
        y_vec_mean=np.mean(y_vec)
        z_vec_mean=np.mean(z_vec)

        self.change_vec_sum=0.1*sum(self.change_vec)+0.9*self.change_vec_sum
        print("Clusters : ",self.change_vec_sum)
        if self.change_vec_sum>7 and self.salad_detected==False:
            print("Salad_detected")
            self.salad_value=1
            self.salad_detected=True
        if self.change_vec_sum>7:
            self.salad_value=1
            self.salad_detected=True
            for i in range (int(self.change_vec_sum)):
                x_vec_tmp=[]
                y_vec_tmp=[]
                z_vec_tmp=[]
                for j in range (len(self.data[i].points)):
                    x_vec_tmp.append(self.data[i].points[j].x)
                    y_vec_tmp.append(self.data[i].points[j].y)
                    z_vec_tmp.append(self.data[i].points[j].z)
                x_vec_multi.append(np.mean(x_vec_tmp))
                y_vec_multi.append(np.mean(y_vec_tmp))
                z_vec_multi.append(np.mean(z_vec_tmp))
            # print(x_vec_multi)
            x_vec_mean=np.mean(x_vec_multi)
            y_vec_mean=np.mean(y_vec_multi)
            z_vec_mean=np.mean(z_vec_multi)            
        # print(len(self.data[0].points),len(self.data[1].points),len(self.data[2].points),len(self.data[3].points),len(self.data[4].points),
        # len(self.data[5].points),len(self.data[6].points),len(self.data[7].points),
        # len(self.data[8].points),len(self.data[9].points),len(self.data[10].points),
        # len(self.data[11].points),len(self.data[12].points),len(self.data[13].points),
        # len(self.data[14].points),len(self.data[15].points),len(self.data[16].points),)
        # for i in range (len(self.data[1].points)):    
        #     x_vec2.append(self.data[1].points[i].x)
        #     y_vec2.append(self.data[1].points[i].y)
        #     z_vec2.append(self.data[1].points[i].z)
        # x_vec2_mean=np.mean(x_vec2)
        # y_vec2_mean=np.mean(y_vec2)
        # z_vec2_mean=np.mean(z_vec2)
        self.x=x_vec_mean*0.1+0.90*self.x
        self.y=y_vec_mean*0.1+0.90*self.y
        self.z=z_vec_mean*0.1+0.90*self.z
        print("Dist = ",np.linalg.norm(np.array((x_vec_mean,y_vec_mean,z_vec_mean))-np.array((self.x,self.y,self.z))))
        if (np.linalg.norm(np.array((x_vec_mean,y_vec_mean,z_vec_mean))-np.array((self.x,self.y,self.z)))<0.005):
            print("Ready")
        # zero_closest=np.linalg.norm([x_vec_mean,y_vec_mean,z_vec_mean])>np.linalg.norm([x_vec2_mean,y_vec2_mean,z_vec2_mean])
        # if zero_closest:
        #     self.x=np.mean(x_vec)*0.1+0.90*self.x
        #     self.y=np.mean(y_vec)*0.1+0.90*self.y
        #     self.z=np.mean(z_vec)*0.1+0.90*self.z
        # elif not zero_closest:
        #     self.x=np.mean(x_vec2)*0.1+0.90*self.x
        #     self.y=np.mean(y_vec2)*0.1+0.90*self.y
        #     self.z=np.mean(z_vec2)*0.1+0.90*self.z
        # self.x=np.mean(x_vec)*0.1+0.90*self.x
        # self.y=np.mean(y_vec)*0.1+0.90*self.y
        # self.z=np.mean(z_vec)*0.1+0.90*self.z

        pca = PCA(n_components=3,whiten=True)
        # # print(np.stack((x_vec,y_vec,z_vec),axis=-1))
        # print(np.mean(z_vec))
        x_vec=x_vec-x_vec_mean
        y_vec=y_vec-y_vec_mean
        z_vec=z_vec-z_vec_mean
        # print(np.mean(z_vec))
        pca.fit(np.stack((x_vec,y_vec,z_vec),axis=-1))
        # pca.fit(np.stack((x_vec,y_vec),axis=-1))
        # print(pca.components_.T)
        # print("Var: ", pca.explained_variance_ratio_)
        V = pca.components_
        # V /= V.std()
        # # print("V=",V.T)
        # # print(V.T[0,:],V.T[1,:],V.T[2,:])
        # # x_pca_axis = V.T[0,:]
        # # y_pca_axis = V.T[1,:]
        # # z_pca_axis = V.T[2,:]
        x_pca_axis, y_pca_axis, z_pca_axis = V
        # x_pca_axis, y_pca_axis= V.T
        # if np.argmax(x_pca_axis)!=np.argmax(np.abs(x_pca_axis)):
        if x_pca_axis[0] < 0:
            x_pca_axis=-x_pca_axis        
        # if z_pca_axis[2] < 0:
        #     x_pca_axis=-x_pca_axis
        #     y_pca_axis=-y_pca_axis
        #     z_pca_axis=-x_pca_axis
            
        # print( x_pca_axis)
        # print(np.dot(self.x_pca_axis_old,x_pca_axis))
        # if self.counter>50 and np.dot(self.x_pca_axis_old,x_pca_axis)<0.5:
        #     x_pca_axis=self.x_pca_axis_oldf
        # if np.dot(self.x_pca_axis_best,x_pca)
        # if np.sign(max(x_pca_axis))==-1:
        #     x_pca_axis=-x_pca_axis
        self.x_dir=x_pca_axis*0.01+0.99*self.x_dir
        # self.x_dir=x_pca_axis
        self.x_pca_axis_old=x_pca_axis
        # self.counter=self.counter+1
        # self.x_dir=[0,1,0]
        # print("X_v: ", x_pca_axis)
        # # print(x_pca_axis[0])
        # # plt.plot(x_vec_mean,y_vec_mean,z_vec_mean,1,1,1, color='red')
        # # plt.quiver(x_vec_mean,y_vec_mean,z_vec_mean,x_pca_axis,y_pca_axis,z_pca_axis)
        # # plt.quiver(x_vec_mean,y_vec_mean,z_vec_mean,x_pca_axis,y_pca_axis,z_pca_axis)
        # V = np.array([[1,1,-1],[-2,2,1],[4,-7,1]])
        # origin = [0], [0] # origin point

        # plt.quiver(0,0,0, V[:,0], V[:,1], V[:,2], color=['r','b','g'], scale=21)
        # plt.show()
        # fig = plt.figure()
        # ax = fig.gca(projection='3d')
        # print(np.linalg.norm([x_pca_axis,y_pca_axis,z_pca_axis],axis=1))
        # ax.quiver([x_vec_mean,x_vec_mean,x_vec_mean], [y_vec_mean,y_vec_mean,y_vec_mean], [z_vec_mean,z_vec_mean,z_vec_mean], x_pca_axis, y_pca_axis, z_pca_axis,length=0.01)
        # fig = plt.figure(1, figsize=(4, 3))
        # elev = -40
        # azim = -80
        # ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=elev, azim=azim)
        # ax = fig.gca(projection='3d')
        # # x_pca_plane = np.r_[x_pca_axis[:2], - x_pca_axis[1::-1]]
        # # y_pca_plane = np.r_[y_pca_axis[:2], - y_pca_axis[1::-1]]
        # # z_pca_plane = np.r_[z_pca_axis[:2], - z_pca_axis[1::-1]]
        # # x_pca_plane.shape = (2, 2)
        # # y_pca_plane.shape = (2, 2)
        # # z_pca_plane.shape = (2, 2)
        # # ax.plot_surface(x_pca_plane, y_pca_plane, z_pca_plane)
        # # ax.w_xaxis.set_ticklabels([])
        # # ax.w_yaxis.set_ticklabels([])
        # # ax.w_zaxis.set_ticklabels([])        
        # ax.scatter(x_vec, y_vec, z_vec, marker='+', alpha=.4)
        # ax.quiver(0,0,0, x_pca_axis[0],x_pca_axis[1],x_pca_axis[2],length=0.01,color='red')
        # ax.quiver(0,0,0, y_pca_axis[0],y_pca_axis[1],y_pca_axis[2],length=0.01,color='green')
        # ax.quiver(0,0,0, z_pca_axis[0],z_pca_axis[1],z_pca_axis[2],length=0.01,color='blue')
        # plt.show()
        # with open("points2.txt", mode='w') as f:  # I add the mode='w'
        #     for i in range(len(x_vec)):
        #         f.write("%f,"%float(x_vec[i]))
        #         f.write("%f,"%float(y_vec[i]))
        #         f.write("%f,\n"%float(z_vec[i]))

    def quat_from_Vector(self, vec):
        # vec=np.array([1,0,0])
        ## Align for x
        # axis_x = vec/np.linalg.norm(np.array(vec))
        # axis_z = -np.array([0,0,1])
        # axis_z_on_x = np.dot(axis_z, axis_x)
        # axis_z_2 = axis_z - axis_z_on_x * axis_x
        # axis_z_3 = axis_z_2/np.linalg.norm(axis_z_2)
        # axis_y = np.cross(axis_z_3, axis_x)
        ## Align for z
        axis_x = vec/np.linalg.norm(np.array(vec))
        axis_z = -self.up/np.linalg.norm(self.up)
        axis_x_on_z = np.dot(axis_x, axis_z)
        axis_x_2 = axis_x - axis_x_on_z * axis_z
        axis_x_3 = axis_x_2/np.linalg.norm(axis_x_2)
        axis_y = np.cross(axis_z, axis_x_3)
        axis_y_2 = axis_y/np.linalg.norm(axis_y)
        # print(np.linalg.norm(axis_x), np.linalg.norm(axis_y), np.linalg.norm(axis_z))
        # print(np.dot(axis_x,axis_z))
        # axis_y = -np.array([0, 1, 0]) # Originaly negative
        # axis_z = np.array(vec)
        # axis_z_on_y = np.dot(axis_y, axis_z)
        # axis_z = axis_z - axis_z_on_y * axis_y
        # axis_z = axis_z/np.linalg.norm(axis_z)
        # axis_x = np.cross(axis_y, axis_z)
        # print(np.linalg.norm(axis_x_3),np.linalg.norm(axis_y_2),np.linalg.norm(axis_z))
        rot_mat = np.zeros((4, 4))
        rot_mat[:3, 0] = axis_x_3
        rot_mat[:3, 1] = axis_y_2
        rot_mat[:3, 2] = axis_z
        rot_mat[3, 3] = 1
        q_tf = tf.transformations.quaternion_from_matrix(rot_mat)
        # print(rot_mat)
        # return q_tf/np.linalg.norm(q_tf)
        return q_tf

    def quat_from_Vector_y(self, vec):
        # vec=np.array([1,0,0])
        ## Align for x
        # axis_x = vec/np.linalg.norm(np.array(vec))
        # axis_z = -np.array([0,0,1])
        # axis_z_on_x = np.dot(axis_z, axis_x)
        # axis_z_2 = axis_z - axis_z_on_x * axis_x
        # axis_z_3 = axis_z_2/np.linalg.norm(axis_z_2)
        # axis_y = np.cross(axis_z_3, axis_x)
        ## Align for z
        axis_x = vec/np.linalg.norm(np.array(vec))
        axis_z = -self.up/np.linalg.norm(self.up)
        axis_x_on_z = np.dot(axis_x, axis_z)
        axis_x_2 = axis_x - axis_x_on_z * axis_z
        axis_x_3 = axis_x_2/np.linalg.norm(axis_x_2)
        axis_y = np.cross(axis_z, axis_x_3)
        axis_y_2 = axis_y/np.linalg.norm(axis_y)
        # print(np.linalg.norm(axis_x), np.linalg.norm(axis_y), np.linalg.norm(axis_z))
        # print(np.dot(axis_x,axis_z))
        # axis_y = -np.array([0, 1, 0]) # Originaly negative
        # axis_z = np.array(vec)
        # axis_z_on_y = np.dot(axis_y, axis_z)
        # axis_z = axis_z - axis_z_on_y * axis_y
        # axis_z = axis_z/np.linalg.norm(axis_z)
        # axis_x = np.cross(axis_y, axis_z)
        # print(np.linalg.norm(axis_x_3),np.linalg.norm(axis_y_2),np.linalg.norm(axis_z))
        rot_mat = np.zeros((4, 4))
        rot_mat[:3, 0] = axis_y_2
        rot_mat[:3, 1] = -axis_x_3
        rot_mat[:3, 2] = axis_z
        rot_mat[3, 3] = 1
        q_tf = tf.transformations.quaternion_from_matrix(rot_mat)
        # print(rot_mat)
        # return q_tf/np.linalg.norm(q_tf)
        return q_tf    


    def plot_test(self):
        fig = plt.figure()
        ax = fig.gca(projection='3d')

        # Make the grid
        x, y, z = np.meshgrid(np.arange(-0.8, 1, 0.2),
                            np.arange(-0.8, 1, 0.2),
                            np.arange(-0.8, 1, 0.8))

        # Make the direction data for the arrows
        u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
        v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
        w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *
            np.sin(np.pi * z))

        # ax.quiver(x, y, z, u, v, w, length=0.1)
        ax.quiver(0,0,0,-1,0,0,length=0.1)

        plt.show()

    def plot_pcl(self):
        Vec=[0.053063,-0.009758,-0.022948,
            0.047611,-0.009872,-0.022948,
            0.031523,-0.009556,-0.023136,
            0.025676,-0.008662,-0.023871,
            0.018896,-0.008094,-0.023542,
            0.012389,-0.008903,-0.023091,
            0.007828,-0.010253,-0.022948,
            0.059176,-0.014449,-0.022948,
            0.053756,-0.014141,-0.023590,
            0.046640,-0.014318,-0.023604,
            0.039792,-0.014406,-0.023115,
            0.033012,-0.014216,-0.024171,
            0.025912,-0.014417,-0.024937,
            0.018566,-0.014346,-0.024572,
            0.011839,-0.014149,-0.024526,
            0.005130,-0.014631,-0.024158,
            -0.000436,-0.015873,-0.023412,
            0.058617,-0.019716,-0.022948,
            0.053925,-0.021367,-0.023267,
            0.046646,-0.021462,-0.023948,
            0.039831,-0.021413,-0.024183,
            0.032777,-0.021251,-0.025266,
            0.025637,-0.021074,-0.025526,
            0.018752,-0.021152,-0.025454,
            0.011846,-0.021441,-0.026344,
            0.004708,-0.021076,-0.025833,
            -0.001450,-0.021005,-0.023508,
            0.052213,-0.027246,-0.022948,
            0.046637,-0.028452,-0.023232,
            0.039805,-0.028399,-0.023467,
            0.032684,-0.028051,-0.024993,
            0.025583,-0.028209,-0.025948,
            0.018874,-0.028065,-0.026570,
            0.012103,-0.028263,-0.026750,
            0.004954,-0.028205,-0.024732,
            0.000314,-0.026833,-0.023215,
            0.045111,-0.033509,-0.022948,
            0.039648,-0.035153,-0.023027,
            0.032989,-0.035155,-0.023788,
            0.025830,-0.035308,-0.025160,
            0.018854,-0.035254,-0.026392,
            0.012110,-0.034941,-0.025209,
            0.006881,-0.033220,-0.023415,
            0.031692,-0.040100,-0.022948,
            0.025718,-0.041325,-0.023678,
            0.018651,-0.042321,-0.023962,
            0.015437,-0.046015,-0.022948,
            0.065192,0.003509,-0.016948,
            0.060029,0.004052,-0.016948,
            0.053303,0.004542,-0.017073,
            0.046516,0.005104,-0.017630,
            0.039489,0.005796,-0.018362,
            0.032677,0.006018,-0.018567,
            0.026361,0.005290,-0.017530,
            0.021130,0.003703,-0.016948,
            0.079396,-0.002155,-0.016948,
            0.074427,-0.001194,-0.017645,
            0.067502,-0.000362,-0.018138,
            0.060485,-0.000229,-0.018671,
            0.053521,-0.000439,-0.019370,
            0.046599,-0.000349,-0.020081,
            0.039745,0.000073,-0.020765,
            0.032699,-0.000072,-0.020353,
            0.025799,-0.000430,-0.019448,
            0.018830,-0.000476,-0.019059,
            0.011980,-0.000637,-0.018772,
            0.005132,-0.001119,-0.017660,
            -0.000350,-0.002767,-0.016948,
            0.080286,-0.007543,-0.017023,
            0.074933,-0.007224,-0.019036,
            0.068083,-0.007193,-0.020548,
            0.060846,-0.007107,-0.021101,
            0.053693,-0.006635,-0.021626,
            0.046409,-0.006867,-0.021530,
            0.039675,-0.007183,-0.020858,
            0.033247,-0.006637,-0.021047,
            0.026336,-0.005230,-0.021776,
            0.018476,-0.004796,-0.021948,
            0.010864,-0.006036,-0.021693,
            0.004671,-0.007211,-0.020502,
            -0.002043,-0.007277,-0.018473,
            -0.008802,-0.008598,-0.017406,
            -0.013485,-0.010208,-0.016948,
            0.080848,-0.014462,-0.017136,
            0.075089,-0.014181,-0.019143,
            0.068035,-0.014337,-0.021380,
            0.062447,-0.013965,-0.021948,
            0.002950,-0.011563,-0.021948,
            -0.003047,-0.013401,-0.021165,
            -0.009173,-0.014234,-0.019338,
            -0.015139,-0.015068,-0.017531,
            0.080320,-0.020198,-0.017081,
            0.075028,-0.020945,-0.018825,
            0.067959,-0.021144,-0.020987,
            0.061742,-0.021420,-0.021856,
            -0.004680,-0.021567,-0.021903,
            -0.009262,-0.021233,-0.020585,
            -0.016273,-0.021019,-0.018543,
            -0.020978,-0.022491,-0.016998,
            0.073004,-0.026421,-0.017266,
            0.067586,-0.028243,-0.017992,
            0.060537,-0.027950,-0.020251,
            0.054768,-0.029296,-0.021754,
            -0.003075,-0.028560,-0.021174,
            -0.009426,-0.028187,-0.018842,
            -0.016155,-0.028149,-0.017751,
            -0.021995,-0.028320,-0.016968,
            0.066454,-0.032304,-0.016948,
            0.059655,-0.033685,-0.017531,
            0.053421,-0.035213,-0.019857,
            0.047138,-0.036184,-0.021741,
            0.041887,-0.038514,-0.021948,
            0.009057,-0.038056,-0.021948,
            0.004137,-0.035636,-0.020871,
            -0.002211,-0.035121,-0.019420,
            -0.009167,-0.035014,-0.017743,
            -0.015626,-0.033430,-0.016948,
            -0.021120,-0.032465,-0.016948,
            0.053022,-0.040137,-0.018281,
            0.046239,-0.041874,-0.020536,
            0.039717,-0.042356,-0.021031,
            0.033406,-0.042978,-0.021548,
            0.026558,-0.044859,-0.021948,
            0.021808,-0.045538,-0.021948,
            -0.000074,-0.040309,-0.017025,
            0.044365,-0.046832,-0.019504,
            0.039295,-0.047518,-0.019091,
            0.032613,-0.048296,-0.019672,
            0.025840,-0.049023,-0.019916,
            0.018744,-0.048912,-0.020875,
            0.037201,0.018058,-0.009948,
            0.032841,0.018557,-0.009948,
            0.026111,0.018488,-0.009948,
            0.019230,0.018077,-0.009948,
            0.074196,0.011495,-0.010600,
            0.067666,0.012305,-0.010994,
            0.060559,0.013078,-0.011309,
            0.053614,0.013246,-0.011977,
            0.046547,0.012812,-0.012497,
            0.039570,0.013322,-0.011854,
            0.032980,0.013649,-0.012229,
            0.026050,0.013792,-0.012355,
            0.018812,0.013943,-0.011417,
            0.012009,0.013299,-0.010994,
            0.005588,0.011698,-0.010656,
            0.001182,0.010642,-0.009948,
            0.085403,0.003492,-0.009948,
            0.080680,0.005996,-0.011234,
            0.074840,0.006978,-0.012886,
            0.067753,0.006862,-0.014362,
            0.060751,0.007639,-0.014862,
            0.053834,0.008093,-0.015330,
            0.046606,0.008380,-0.015705,
            0.039859,0.009046,-0.015428,
            0.032515,0.009219,-0.015781,
            0.024647,0.008170,-0.015398,
            0.018645,0.006934,-0.014623,
            0.011899,0.006729,-0.014248,
            0.004962,0.006829,-0.013674,
            -0.001747,0.006253,-0.011813,
            -0.007327,0.004583,-0.010386,
            0.088319,-0.001059,-0.011948,
            0.082184,0.000333,-0.014511,
            0.074878,0.002308,-0.015417,
            0.069916,0.002614,-0.015948,
            0.009543,0.002614,-0.015948,
            0.003421,0.001918,-0.015823,
            -0.002592,0.000230,-0.014934,
            -0.008909,-0.000441,-0.012530,
            -0.014682,-0.002111,-0.010828,
            0.092787,-0.009778,-0.013948,
            0.088472,-0.007313,-0.014291,
            0.083577,-0.006926,-0.015786,
            -0.005258,-0.004397,-0.015948,
            -0.009989,-0.005337,-0.015408,
            -0.016209,-0.007159,-0.013734,
            -0.022173,-0.008782,-0.011069,
            0.093132,-0.014128,-0.013091,
            0.088664,-0.014028,-0.014480,
            0.084035,-0.014232,-0.015948,
            -0.017934,-0.013122,-0.015448,
            -0.023215,-0.014127,-0.013140,
            -0.028871,-0.015142,-0.010723,
            0.087209,-0.020715,-0.014997,
            0.082720,-0.022151,-0.015698,
            0.077706,-0.024652,-0.015948,
            -0.024155,-0.020864,-0.014896,
            -0.030239,-0.021380,-0.011934,
            -0.034465,-0.022469,-0.010048,
            0.085926,-0.025658,-0.013948,
            0.081122,-0.027656,-0.014257,
            0.075158,-0.029278,-0.015663,
            0.070500,-0.031078,-0.015948,
            -0.025615,-0.028661,-0.015914,
            -0.030251,-0.028068,-0.013560,
            -0.035170,-0.028407,-0.010428,
            0.067746,-0.035645,-0.015354,
            0.061364,-0.036614,-0.015516,
            -0.011724,-0.038518,-0.015948,
            -0.016883,-0.036529,-0.015820,
            -0.023367,-0.035622,-0.015432,
            -0.030048,-0.035271,-0.013695,
            -0.036081,-0.035496,-0.010886,
            0.066670,-0.040580,-0.013515,
            0.061043,-0.040576,-0.014238,
            0.056673,-0.040232,-0.015948,
            0.001363,-0.044906,-0.015948,
            -0.016335,-0.042048,-0.014080,
            -0.023310,-0.041973,-0.013795,
            -0.030341,-0.042235,-0.012594,
            -0.036174,-0.042042,-0.010629,
            0.002481,-0.047128,-0.014148,
            -0.001010,-0.046574,-0.011698,
            -0.016690,-0.047936,-0.011479,
            -0.023238,-0.048727,-0.012056,
            -0.030155,-0.048923,-0.011303,
            -0.035063,-0.047679,-0.010020,
            -0.024684,-0.053097,-0.009948,
            -0.029010,-0.053185,-0.009948,
            0.065481,0.024640,-0.002948,
            0.060514,0.024979,-0.003281,
            0.053219,0.025406,-0.003448,
            0.046601,0.026550,-0.004062,
            0.039878,0.027096,-0.004400,
            0.032657,0.027140,-0.004520,
            0.025986,0.026511,-0.004343,
            0.019574,0.025549,-0.003708,
            0.013877,0.024640,-0.002948,
            0.079296,0.017326,-0.002948,
            0.073933,0.019178,-0.003781,
            0.067735,0.020541,-0.004687,
            0.060906,0.020764,-0.006121,
            0.053653,0.020817,-0.007072,
            0.046841,0.020837,-0.007448,
            0.040166,0.020984,-0.008076,
            0.032910,0.022012,-0.007966,
            0.025574,0.021871,-0.007841,
            0.018635,0.021424,-0.007303,
            0.011809,0.020615,-0.006226,
            0.005163,0.019616,-0.004295,
            -0.000589,0.017879,-0.003115,
            0.086900,0.011663,-0.003248,
            0.081409,0.013245,-0.005425,
            0.075054,0.014686,-0.006775,
            0.068096,0.015552,-0.008148,
            0.061331,0.016361,-0.008798,
            0.053063,0.016645,-0.008948,
            0.046857,0.016531,-0.008948,
            0.041853,0.016575,-0.008948,
            0.010433,0.016386,-0.008781,
            0.004438,0.014734,-0.007488,
            -0.002328,0.013581,-0.005291,
            -0.008987,0.013206,-0.003910,
            -0.014011,0.012702,-0.003312,
            0.088135,0.006419,-0.004603,
            0.083568,0.007835,-0.007554,
            -0.003836,0.008918,-0.008520,
            -0.009517,0.007527,-0.007136,
            -0.015616,0.006348,-0.004912,
            -0.022314,0.004435,-0.003630,
            0.092975,0.002407,-0.003948,
            0.089724,0.002118,-0.007234,
            -0.011997,0.002050,-0.008948,
            -0.016793,0.000844,-0.007744,
            -0.023208,-0.000426,-0.004656,
            -0.028131,-0.001119,-0.002985,
            -0.018906,-0.003796,-0.008948,
            -0.023845,-0.005995,-0.007412,
            -0.030191,-0.007116,-0.005543,
            -0.035901,-0.008370,-0.004087,
            -0.031569,-0.013219,-0.008448,
            -0.037223,-0.014214,-0.005702,
            -0.042243,-0.015919,-0.003369,
            -0.033254,-0.018144,-0.008948,
            -0.037638,-0.020971,-0.007615,
            -0.043803,-0.021417,-0.004170,
            -0.048087,-0.023510,-0.002948,
            -0.038611,-0.028191,-0.007998,
            -0.044236,-0.028369,-0.005103,
            -0.049674,-0.028886,-0.003234,
            -0.039583,-0.034830,-0.008853,
            -0.044142,-0.035204,-0.007348,
            -0.051078,-0.035155,-0.004389,
            -0.055546,-0.036890,-0.002948,
            -0.039859,-0.042399,-0.008948,
            -0.044257,-0.042154,-0.007860,
            -0.051159,-0.042027,-0.005135,
            -0.055580,-0.040935,-0.003020,
            -0.015043,-0.051157,-0.007805,
            -0.019703,-0.052420,-0.008948,
            -0.033254,-0.052420,-0.008948,
            -0.037728,-0.049601,-0.008374,
            -0.044126,-0.049114,-0.006155,
            -0.050029,-0.048322,-0.003787,
            -0.012128,-0.053375,-0.002948,
            -0.016187,-0.056099,-0.004891,
            -0.022980,-0.056485,-0.007224,
            -0.030541,-0.056608,-0.007983,
            -0.036992,-0.056110,-0.006965,
            -0.043822,-0.056316,-0.003932,
            -0.047884,-0.053375,-0.002948,
            -0.036674,-0.062042,-0.006144,
            -0.043812,-0.061562,-0.003920,
            0.052942,0.038814,0.004052,
            0.046256,0.039976,0.003480,
            0.039580,0.040866,0.003249,
            0.034593,0.040595,0.003909,
            0.074392,0.032093,0.003885,
            0.068252,0.032109,0.004052,
            0.060425,0.034371,0.003718,
            0.053760,0.034740,0.002621,
            0.046742,0.034754,0.001458,
            0.039754,0.034761,0.000913,
            0.032796,0.034661,0.001681,
            0.025980,0.033713,0.002499,
            0.018808,0.033932,0.002973,
            0.012706,0.033008,0.003283,
            0.074753,0.027755,0.001358,
            0.067824,0.027898,0.001039,
            0.060825,0.028475,0.001104,
            0.053929,0.028874,-0.000387,
            0.047095,0.030029,-0.001448,
            0.040009,0.030638,-0.001580,
            0.032908,0.030706,-0.001761,
            0.025446,0.030019,-0.001077,
            0.018548,0.028905,-0.000091,
            0.011768,0.027863,0.001219,
            0.005053,0.027041,0.002276,
            -0.002105,0.026213,0.002726,
            -0.009030,0.025862,0.002971,
            -0.013885,0.024762,0.003802,
            0.086853,0.018951,0.003283,
            0.081557,0.020511,0.001345,
            0.075595,0.021997,-0.001205,
            0.070013,0.023781,-0.001948,
            0.009277,0.023781,-0.001948,
            0.003842,0.022740,-0.001490,
            -0.002449,0.021185,-0.000864,
            -0.009013,0.020801,-0.000364,
            -0.015456,0.020153,0.001520,
            -0.021503,0.018296,0.003219,
            0.083381,0.016522,-0.001256,
            -0.004582,0.017259,-0.001948,
            -0.009615,0.016682,-0.001848,
            -0.016947,0.014549,-0.001008,
            -0.023185,0.013539,0.001798,
            -0.028441,0.012149,0.003752,
            0.094355,0.006094,0.000492,
            0.091161,0.007757,-0.001481,
            -0.018084,0.008711,-0.001448,
            -0.023498,0.007555,-0.000188,
            -0.030071,0.006804,0.001380,
            -0.036151,0.005443,0.003203,
            0.094836,0.003054,-0.001281,
            -0.031195,0.000569,-0.001494,
            -0.037120,-0.000257,0.001052,
            -0.041588,-0.000576,0.003961,
            -0.038202,-0.005994,-0.001073,
            -0.043964,-0.007401,0.001037,
            -0.050454,-0.008265,0.002971,
            -0.045143,-0.013684,-0.000861,
            -0.051090,-0.014400,0.002272,
            -0.055557,-0.016620,0.003885,
            -0.046904,-0.018991,-0.001648,
            -0.051410,-0.021128,-0.000165,
            -0.057483,-0.021544,0.002889,
            -0.061704,-0.024265,0.004052,
            -0.052643,-0.027259,-0.001462,
            -0.058057,-0.028258,0.001003,
            -0.063460,-0.028891,0.003480,
            -0.058472,-0.034961,-0.000530,
            -0.063975,-0.034965,0.003077,
            -0.058878,-0.042269,-0.000773,
            -0.064964,-0.042156,0.002852,
            -0.052709,-0.050609,-0.001091,
            -0.057922,-0.049022,0.001385,
            -0.063248,-0.047216,0.003552,
            -0.047382,-0.057335,-0.001948,
            -0.051135,-0.056462,-0.000385,
            -0.057101,-0.056285,0.003106,
            -0.047382,-0.061819,-0.001948,
            -0.051230,-0.061820,-0.000408,
            -0.057991,-0.062088,0.002393,
            -0.062733,-0.063286,0.003830,
            0.050736,0.046377,0.010718,
            0.046190,0.048057,0.009610,
            0.039804,0.048809,0.008735,
            0.032886,0.048912,0.008037,
            0.025791,0.048904,0.009052,
            0.019622,0.047581,0.010500,
            0.014800,0.046102,0.011052,
            0.078891,0.038462,0.011052,
            0.074054,0.039538,0.010513,
            0.067742,0.040151,0.008877,
            0.060808,0.040323,0.007680,
            0.053616,0.042036,0.007445,
            0.047130,0.043525,0.006160,
            0.040303,0.044576,0.005330,
            0.031854,0.042379,0.005486,
            0.025679,0.041822,0.007482,
            0.018870,0.041836,0.008455,
            0.012134,0.041592,0.009246,
            0.004909,0.041120,0.010144,
            -0.001673,0.040317,0.010322,
            -0.006847,0.038462,0.011052,
            0.081408,0.034205,0.008860,
            0.074846,0.035278,0.007644,
            0.067582,0.035279,0.005750,
            0.063034,0.036626,0.005052,
            0.030033,0.037626,0.005052,
            0.025640,0.037011,0.005420,
            0.018868,0.037142,0.005526,
            0.011039,0.035838,0.006484,
            0.004678,0.034728,0.007975,
            -0.002203,0.034675,0.008567,
            -0.008629,0.034211,0.009340,
            -0.013432,0.031961,0.010718,
            0.003956,0.030340,0.005385,
            -0.002354,0.029855,0.005885,
            -0.009382,0.029443,0.006385,
            -0.015384,0.027542,0.008452,
            -0.018459,0.023123,0.007195,
            -0.023361,0.020587,0.007802,
            -0.030046,0.018950,0.009640,
            -0.034306,0.017697,0.010552,
            -0.026218,0.016792,0.005052,
            -0.030984,0.014430,0.006540,
            -0.036687,0.013136,0.008834,
            -0.041793,0.011162,0.010652,
            0.097118,0.008458,0.005052,
            -0.032885,0.010125,0.005052,
            -0.038145,0.008111,0.005995,
            -0.043783,0.006343,0.008260,
            -0.048793,0.004659,0.010496,
            -0.045114,-0.000055,0.006594,
            -0.051009,-0.000469,0.009152,
            -0.055617,-0.001632,0.010927,
            -0.046113,-0.004235,0.005252,
            -0.052141,-0.005784,0.006052,
            -0.057636,-0.007637,0.008252,
            -0.062581,-0.010005,0.010452,
            -0.054553,-0.011959,0.005052,
            -0.058514,-0.014120,0.006404,
            -0.064574,-0.014559,0.009630,
            -0.060519,-0.019817,0.005436,
            -0.065288,-0.021222,0.008035,
            -0.069736,-0.022479,0.010552,
            -0.066508,-0.027565,0.005989,
            -0.071579,-0.028509,0.009242,
            -0.067602,-0.035140,0.005346,
            -0.072276,-0.035307,0.008052,
            -0.076853,-0.035757,0.010802,
            -0.067886,-0.041543,0.005052,
            -0.071948,-0.042001,0.007090,
            -0.077128,-0.040687,0.010719,
            -0.061219,-0.051960,0.005052,
            -0.065765,-0.050055,0.006566,
            -0.071089,-0.049051,0.009172,
            -0.060618,-0.056405,0.005581,
            -0.065210,-0.056549,0.008948,
            -0.069745,-0.053737,0.010885,
            -0.060942,-0.060155,0.005052,
            -0.065683,-0.062005,0.007341,
            -0.070450,-0.063136,0.010496,
            0.039041,0.060430,0.018052,
            0.032719,0.061441,0.018052,
            0.026338,0.060377,0.018052,
            0.021845,0.060141,0.018052,
            0.057392,0.052338,0.018052,
            0.052894,0.054546,0.016961,
            0.046417,0.055873,0.015543,
            0.039724,0.056072,0.014739,
            0.032852,0.056158,0.015687,
            0.025932,0.056116,0.015552,
            0.019096,0.056025,0.015729,
            0.012682,0.054951,0.017402,
            0.079067,0.045402,0.018052,
            0.074573,0.047678,0.016839,
            0.068060,0.048226,0.016692,
            0.060314,0.047915,0.017561,
            0.053617,0.049039,0.014568,
            0.047573,0.051129,0.012433,
            0.041513,0.052086,0.012052,
            0.023632,0.052086,0.012052,
            0.017717,0.050314,0.012846,
            0.011727,0.048980,0.014888,
            0.005409,0.047697,0.015923,
            -0.000070,0.046838,0.017719,
            0.086149,0.038753,0.016719,
            0.081366,0.040878,0.015207,
            0.075210,0.042765,0.013447,
            0.067947,0.043585,0.012802,
            0.061274,0.043759,0.013870,
            0.055707,0.044284,0.012219,
            0.010434,0.045274,0.012052,
            0.004947,0.044801,0.012052,
            -0.003170,0.042674,0.013052,
            -0.008833,0.040505,0.014766,
            -0.013559,0.039115,0.017302,
            0.086124,0.035810,0.014352,
            0.083466,0.036836,0.012415,
            -0.011219,0.036440,0.012302,
            -0.015977,0.034295,0.015527,
            -0.021831,0.032339,0.017838,
            -0.018300,0.028918,0.012802,
            -0.023268,0.027738,0.015490,
            -0.029710,0.026993,0.016338,
            -0.035803,0.025453,0.016785,
            -0.024413,0.023406,0.012838,
            -0.030567,0.022508,0.013199,
            -0.037154,0.020904,0.014126,
            -0.042630,0.019350,0.017107,
            -0.038981,0.015813,0.012552,
            -0.044098,0.013836,0.015467,
            -0.049591,0.011291,0.017452,
            -0.046307,0.009342,0.012941,
            -0.051579,0.007085,0.014456,
            -0.057604,0.005424,0.016309,
            -0.062880,0.004153,0.017852,
            -0.053994,0.002417,0.012052,
            -0.058790,0.000133,0.013885,
            -0.063661,-0.000173,0.017302,
            -0.060029,-0.005336,0.012952,
            -0.065092,-0.007102,0.015435,
            -0.069928,-0.009220,0.017452,
            -0.067300,-0.012221,0.012752,
            -0.071645,-0.014465,0.015564,
            -0.076126,-0.017022,0.018052,
            -0.072619,-0.020789,0.013836,
            -0.076598,-0.021721,0.017338,
            -0.074508,-0.026646,0.012635,
            -0.078941,-0.028488,0.014758,
            -0.085265,-0.029761,0.016159,
            -0.079855,-0.034843,0.013112,
            -0.085633,-0.035259,0.015961,
            -0.089998,-0.037397,0.018052,
            -0.080145,-0.042348,0.013812,
            -0.084753,-0.041406,0.017135,
            -0.074269,-0.050880,0.012452,
            -0.079387,-0.049571,0.016076,
            -0.083062,-0.046934,0.018052,
            -0.072616,-0.056651,0.012991,
            -0.079244,-0.056264,0.016052,
            -0.083310,-0.058143,0.018052,
            -0.073314,-0.061843,0.012646,
            -0.079056,-0.061683,0.015173,
            -0.084177,-0.061115,0.018052,
            0.039508,0.068297,0.023941,
            0.032703,0.069374,0.022218,
            0.025889,0.068440,0.021466,
            0.021002,0.067266,0.022802,
            0.053034,0.062130,0.023592,
            0.046631,0.062799,0.021918,
            0.039702,0.063562,0.020529,
            0.032599,0.063801,0.019146,
            0.025471,0.063451,0.019785,
            0.018832,0.062458,0.020711,
            0.060558,0.055567,0.020782,
            0.054506,0.057235,0.020012,
            0.049587,0.058467,0.019052,
            0.010091,0.056578,0.019111,
            0.004738,0.054230,0.020052,
            0.061955,0.051124,0.019052,
            0.004035,0.050626,0.019734,
            -0.007025,0.046115,0.023885,
            -0.009707,0.043616,0.021489,
            -0.016147,0.040778,0.022364,
            -0.022723,0.039494,0.023892,
            -0.028038,0.038691,0.024802,
            -0.018404,0.036725,0.019852,
            -0.023589,0.035226,0.020335,
            -0.029945,0.034338,0.022283,
            -0.035172,0.032291,0.024152,
            -0.031117,0.030049,0.019552,
            -0.037317,0.028259,0.021623,
            -0.043382,0.025887,0.023572,
            -0.048231,0.024750,0.025052,
            -0.045164,0.021365,0.020464,
            -0.050853,0.019971,0.022785,
            -0.056259,0.018673,0.024302,
            -0.046720,0.016074,0.019052,
            -0.051336,0.014134,0.020114,
            -0.057590,0.013416,0.023029,
            -0.061950,0.011031,0.025052,
            -0.058922,0.008592,0.020443,
            -0.064473,0.006816,0.021538,
            -0.067086,-0.000051,0.019772,
            -0.070579,-0.001058,0.021283,
            -0.067807,-0.005013,0.019052,
            -0.072501,-0.006878,0.020652,
            -0.077553,-0.008680,0.022510,
            -0.074670,-0.012389,0.019677,
            -0.079485,-0.014128,0.021570,
            -0.083701,-0.015260,0.022870,
            -0.080181,-0.021085,0.020991,
            -0.085246,-0.021279,0.023999,
            -0.081572,-0.025867,0.019623,
            -0.086128,-0.026095,0.022841,
            -0.087906,-0.043211,0.019502,
            -0.091468,-0.042681,0.020445,
            -0.082590,-0.050232,0.019052,
            -0.086537,-0.049226,0.020198,
            -0.092204,-0.049298,0.021691,
            -0.086598,-0.056070,0.020585,
            -0.092509,-0.056080,0.022241,
            -0.087357,-0.060718,0.019718,
            -0.091036,-0.060600,0.021052,
            -0.015760,0.047219,0.030955,
            -0.023222,0.047218,0.031415,
            -0.029442,0.046698,0.031139,
            -0.012123,0.044684,0.026052,
            -0.017158,0.043819,0.027330,
            -0.023387,0.043017,0.027934,
            -0.030264,0.041978,0.029108,
            -0.036365,0.040845,0.030894,
            -0.042029,0.039105,0.032052,
            -0.032769,0.037286,0.026385,
            -0.037726,0.034968,0.027779,
            -0.043974,0.034504,0.030492,
            -0.049826,0.033567,0.031878,
            -0.039642,0.030481,0.026052,
            -0.044959,0.028930,0.027407,
            -0.051117,0.028232,0.029667,
            -0.055667,0.026406,0.031677,
            -0.052691,0.023270,0.026885,
            -0.057535,0.021595,0.028612,
            -0.060549,0.015254,0.026195,
            -0.064757,0.013573,0.029152,
            -0.069471,0.011679,0.031480,
            -0.065908,0.009713,0.026718,
            -0.089798,-0.024557,0.026052,
            -0.088910,-0.025445,0.026052,
            -0.089798,-0.025445,0.026052,
            -0.016725,0.050721,0.033552,
            -0.022046,0.050128,0.033266,
            -0.040119,0.041191,0.033052,
            -0.043561,0.039742,0.033052,
            -0.053163,0.033220,0.033052,
            -0.056628,0.032121,0.033718,
            -0.054612,0.031227,0.033052,
            -0.058509,0.028297,0.034001,
            -0.061907,0.027055,0.036052,
            -0.059752,0.023960,0.033552,
            -0.068200,0.014922,0.033052,
            -0.069105,0.014017,0.033052]
        # plt.plot(Vec[:3:],Vec[1:3:],Vec[2:3:])
        fig = plt.figure()
        ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=-40, azim=-80)
        ax = fig.gca(projection='3d')
        # x_pca_plane = np.r_[x_pca_axis[:2], - x_pca_axis[1::-1]]
        # y_pca_plane = np.r_[y_pca_axis[:2], - y_pca_axis[1::-1]]
        # z_pca_plane = np.r_[z_pca_axis[:2], - z_pca_axis[1::-1]]
        # x_pca_plane.shape = (2, 2)
        # y_pca_plane.shape = (2, 2)
        # z_pca_plane.shape = (2, 2)
        # ax.plot_surface(x_pca_plane, y_pca_plane, z_pca_plane)
        # ax.w_xaxis.set_ticklabels([])
        # ax.w_yaxis.set_ticklabels([])
        # ax.w_zaxis.set_ticklabels([])        
        ax.scatter(Vec[::3],Vec[1::3],Vec[2::3], marker='+', alpha=.4)
        plt.show()

    
    
if __name__ == '__main__':
    marker_to_target()
